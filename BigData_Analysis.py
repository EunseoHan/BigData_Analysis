# -*- coding: utf-8 -*-
"""빅데이터 분석_기말 프로젝트

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14_hdfpExUT8AADF5O5_3kBKyHgUxYrqt

#휴게소 푸드메뉴현황 이름 정제
"""

!pip install requests
!pip install bs4

import requests
from bs4 import BeautifulSoup

API_Key = "8221864862"
URL="http://data.ex.co.kr/openapi/restinfo/restBestfoodList?key="+API_Key+"&type=xml&numOfRows=100"
print(URL)

rq = requests.get(URL)
soup = BeautifulSoup(rq.text, "lxml-xml")

items = soup.find_all('list')

for item in items:
  try:
    print('음식명 :',item.find('foodNm').get_text())
    #print('도로노선명 :',item.find('routeNm').get_text())
    print('휴게소 :',item.find('stdRestNm').get_text())
    #print('휴게소 주소 :',item.find('svarAddr').get_text())
    print()
  except:
    print()
    pass

food_name = []
rest_name = []

for item in items:
  try:
    food_name.append(item.find('foodNm').get_text())
    rest_name.append(item.find('stdRestNm').get_text())
  except:
    pass

#휴게소정보에 맞춰 휴게소명 변경
for i, data in enumerate(rest_name):
  rest_name[i] = data.rstrip("휴게소")

rest_name #푸드현황 휴게소명

import pandas as pd

df=pd.DataFrame({'음식명':food_name,
                 '휴게소명':rest_name})

df

rest_name2=list(set(rest_name))

rest_name2

"""휴게소 푸드메뉴 정제 후 분석 : 위 리스트에서 알 수 있듯이 푸드메뉴에 대한 데이터가 있는 휴게소 개수가 부족.
즉, 데이터 부족으로 평가기준이 될 수 없다고 판단

#전국휴게소표준데이터에서 기준이 되는 휴게소명, 위도, 경도 데이터 수집
"""

from google.colab import files
uploaded = files.upload()

#표준 거기에 위에 이름 있는지 확인
import pandas as pd

allData =pd.read_csv('한국도로공사_휴게소정보_20230208.csv',index_col=-1, header=0, encoding='cp949',engine='python')

allData.head()

allName = []
for restname in allData['휴게소명']:
  allName.append(restname)

allName #표준 휴게소명

latitude = []
for i in allData['위도']:
  latitude.append(i)

latitude #위도

longitude = []
for i in allData['경도']:
  longitude.append(i)

longitude  #경도

"""#주유소 유무 (기준1) 데이터 수집"""

gasStation = []
for i in allData['주유소유무']:
  gasStation.append(i)

gasStation

"""#약국 유무 (기준2) 데이터 수집"""

drugstore = []
for i in allData['약국유무']:
  drugstore.append(i)

drugstore

for i in range(len(rest_name2)):
  if rest_name2[i] in allName : print("True")
  elif rest_name2[i] not in allName : print("False")

"""주유소 유무 점수"""

gas_score = []
for i in range(len(gasStation)):
  if gasStation[i] == "N" : gas_score.append(0)
  elif gasStation[i] == "Y" : gas_score.append(1)

gas_score

"""약국 유무 점수"""

drug_score = []
for i in range(len(drugstore)):
  if drugstore[i] == "N" : drug_score.append(0)
  elif drugstore[i] == "Y" : drug_score.append(1)

drug_score

"""#휴게소 반려동물 편의시설 (기준3) 이름 정제

"""

#csv 파일 가져오기
from google.colab import files
uploaded = files.upload()

animalData =pd.read_csv('한국도로공사_휴게소 반려동물 편의시설(놀이터) 현황_20211231.csv',index_col=-1, header=0, encoding='cp949',engine='python')

animalData.head()

animal_restName = []
for restname in animalData['휴게소명']:
  animal_restName.append(restname)

animal_restName #반려동물 편의시설 휴게소명

#전국휴게소표준데이터에 이름 있는지 확인
for i in range(len(animal_restName)):
  if animal_restName[i] in allName : print("True")
  elif animal_restName[i] not in allName : print("False")

"""#편의시설 (기준4), 브랜드 (기준5) 데이터 수집 및 정제"""

URL="http://data.ex.co.kr/openapi/business/conveniServiceArea?key="+API_Key+"&type=xml&numOfRows=100"
print(URL)

rq = requests.get(URL)
soup = BeautifulSoup(rq.text, "lxml-xml")

items = soup.find_all('list')

for item in items:
  try:
    print('휴게소 :',item.find('serviceAreaName').get_text())
    print('편의시설:',item.find('convenience').get_text())
    print('브랜드:',item.find('brand').get_text())
    print()
  except:
    print()
    pass

rest_name = []
convenience = []
brand = []

for item in items:
  try:
    rest_name.append(item.find('serviceAreaName').get_text())
    convenience.append(item.find('convenience').get_text())
    brand.append(item.find('brand').get_text())
  except:
    pass

rest_name

#휴게소 이름 정제
for i, data in enumerate(rest_name):
  rest_name[i] = data.rstrip("휴게소")

rest_name

#전국휴게소표준데이터의휴게소명과 일치하는지 확인
for i in range(len(rest_name)):
  if rest_name[i] in allName : print("True")
  elif rest_name[i] not in allName : print("False:",rest_name[i])

#휴게소 이름 정제(전국휴게소표준데이터에 있는 휴게소)
for i in range(len(rest_name)):
  if rest_name[i] == "옥천만남의광장" : rest_name[i] = "옥천만남"
  elif rest_name[i] == "논공(고서)" : rest_name[i] = "논공(광주)"
  elif rest_name[i] == "논공(옥포)" : rest_name[i] = "논공(대구)"
  elif rest_name[i] == "함양(하남)" : rest_name[i] = "함양(대전)"

#출력
for i in range(len(rest_name)):
  if rest_name[i] in allName : print("True")
  elif rest_name[i] not in allName : print("False:",rest_name[i])

convenience #편의시설

#편의시설 데이터 정제
convenience_count = []

for i in range(len(convenience)):
  convenience_test = convenience[i].split('|')
  convenience_count.append(len(convenience_test))

#출력
convenience_count #편의시설 개수

brand #브랜드

#브랜드 데이터 정제1
brand_count = []

for i in range(len(brand)):
  if brand[i] == "CU 편의점" : brand[i] = "CU편의점"
  elif brand[i] == "파스쿠찌, CU 편의점" : brand[i] = "파스쿠찌, CU편의점"
  brand_test = brand[i].split()
  brand_count.append(brand_test)

#출력
brand_count
#print(len(brand_count))

#브랜드 데이터 정제2
count = []

for i in range(len(brand_count)):
  if "외" in brand_count[i] : count.append(int(brand_count[i][-1]) +1)
  else :
      if "-" in brand_count[i] : count.append(0)
      else : count.append(len(brand_count[i]))

count #브랜드 개수
#print(len(count))

df=pd.DataFrame({'휴게소명':rest_name,
                 '편의시설 개수':convenience_count,
                 '브랜드 개수':count})

df

#전국휴게소표준에 없는 휴게소 제외시키기
index = 0
for i in range(len(rest_name)):
  if rest_name[i] not in allName : print("False:",rest_name[i],index)
  index = index + 1

#df.loc[['낙동강의성(영천)', '낙동강구미(상주)', '선기(부산)졸음쉼터', '삼국유사군위(상주)', '언양(부산)']]

df_1 = df.drop([2,3,5,50,71], axis = 0)

df_1 #표준에 없는 휴게소 제외시킨 데이터프레임

rest_name = df_1['휴게소명'].values.tolist() #표준에 없는 휴게소 제외시킨 휴게소명
rest_name

convenience_count = df_1['편의시설 개수'].values.tolist() #표준에 없는 휴게소 제외시킨 편의시설 개수
convenience_count

count = df_1['브랜드 개수'].values.tolist() #표준에 없는 휴게소 제외시킨 편의시설 개수
count

"""편의시설 점수"""

#편의시설 개수 평균 내서 평균이상 = 1, 평균 = 0, 평균이하 = -1
convenience_sum = 0
for i in range(len(convenience_count)):
  #print(type(convenience_count[i])) #타입 확인
  convenience_sum = convenience_sum + convenience_count[i]

convenience_average = round(convenience_sum/len(convenience_count)) #평균 (반올림)
convenience_average

convenience_score = [] #편의시설 평가 점수
a=0
b=0
c=0
for i in range(len(convenience_count)):
  if convenience_count[i] > convenience_average :
    convenience_score.append(1)
    a=a+1
  elif convenience_count[i] == convenience_average :
    convenience_score.append(0)
    b=b+1
  elif convenience_count[i] < convenience_average :
    convenience_score.append(-1)
    c=c+1

print(a,b,c)
print((1*a-1*c)/94)
convenience_score

"""브랜드 점수"""

#브랜드 개수 평균 내서 평균이상 = 1, 평균 = 0, 평균이하 = -1
brand_sum = 0
for i in range(len(count)):
  #print(type(count[i])) #타입 확인
  brand_sum = brand_sum + count[i]

brand_average = round(brand_sum/len(count)) #평균 (반올림)
brand_average

brand_score = [] #편의시설 평가 점수
a=0
b=0
c=0
for i in range(len(count)):
  if count[i] > brand_average :
    brand_score.append(1)
    a=a+1
  elif count[i] == brand_average :
    brand_score.append(0)
    b=b+1
  elif count[i] < brand_average :
    brand_score.append(-1)
    c=c+1

print(a,b,c)
print((1*a-1*c)/94)
brand_score

#전국휴게소표준 기준으로 합치기 (휴게소명, 반려동물 편의시설 유무 평가, 편의시설 개수 평가, 브랜드 개수 평가, 위도, 경도)
#위 평가 기준 정보 없으면 평균고려하여 0으로 채우기

restname_convenience_brand = list(zip(rest_name, convenience_score, brand_score))
print(restname_convenience_brand)
#len(restname_convenience_brand)

convenience_score_final = []
brand_score_final = []

for i in range(len(allName)):
  if allName[i] in rest_name :
    index = rest_name.index(allName[i])
    #print(index)
    convenience_score_final.append(convenience_score[index])
    #print(convenience_score[index])
    brand_score_final.append(brand_score[index])
    #print(brand_score[index])
  else :
    convenience_score_final.append(0)
    brand_score_final.append(0)

print(convenience_score_final)
print(brand_score_final)
check = list(zip(allName, convenience_score_final, brand_score_final))
print(check)

"""반려동물 편의시설 점수"""

#반려동물 편의시설 0(없다),1(있다)
#animal_restName #반려동물 편의시설 휴게소명
animal_convenience_score = []

for i in range(len(allName)):
  if allName[i] in animal_restName:
    animal_convenience_score.append(1)
  else :
    animal_convenience_score.append(0)

animal_convenience_score

print(len(allName))
print(len(animal_convenience_score))
print(len(convenience_score_final))
print(len(brand_score_final))
print(len(gas_score))
print(len(drug_score))
print(len(latitude))
print(len(longitude))
df=pd.DataFrame({'휴게소명':allName,
                 '반려동물 편의시설 평가점수': animal_convenience_score,
                 '편의시설 평가점수': convenience_score_final,
                 '브랜드 평가점수':brand_score_final,
                 '주유소 평가점수':gas_score,
                 '약국 평가점수':drug_score,
                 '위도':latitude,
                 '경도':longitude})

df

df.to_csv('중간단계_완료.csv')

######여기서 추가해 화장실 주차

#구글 드라이브 마운트
from google.colab import drive
drive.mount('/content/drive')

"""#남여 화장실(기준6, 7)"""

#화장실 csv 파일 읽기
import pandas as pd
toilet = pd.read_csv('/content/drive/MyDrive/고속도로 휴게소 화장실 변기수 현황(2020년).csv', encoding='CP949', index_col=None, engine='python')
toilet

#전국휴게소정보표준데이터 파일에 맞게 화장실 파일 휴게소명(시설명) 정리
for i in range(len(toilet)):
    if toilet.시설명[i] == "서울(만남)" : toilet.시설명[i] = "서울만남(부산)"
    elif toilet.시설명[i] == "입장(서울)" : toilet.시설명[i] = "입장거봉포도(서울)"
    elif toilet.시설명[i] == "천안(서울)" : toilet.시설명[i] = "천안삼거리(서울)"
    elif toilet.시설명[i] == "천안(부산)" : toilet.시설명[i] = "천안호두(부산)"
    elif toilet.시설명[i] == "정읍(천안)" : toilet.시설명[i] = "정읍녹두장군(천안)"
    elif toilet.시설명[i] == "정읍(순천)" : toilet.시설명[i] = "정읍녹두장군(순천)"
    elif toilet.시설명[i] == "하남(만남)" : toilet.시설명[i] = "하남드림"
    elif toilet.시설명[i] == "이천(통영)" : toilet.시설명[i] = "이천(남이)"
    elif toilet.시설명[i] == "음성(통영)" : toilet.시설명[i] = "음성(남이)"
    elif toilet.시설명[i] == "오창(통영)" : toilet.시설명[i] = "오창(남이)"
    elif toilet.시설명[i] == "인삼랜드(하남)" : toilet.시설명[i] = "금산인삼랜드(대전)"
    elif toilet.시설명[i] == "인삼랜드(통영)" : toilet.시설명[i] = "금산인삼랜드(통영)"
    elif toilet.시설명[i] == "함양(하남)" : toilet.시설명[i] = "함양(대전)"
    elif toilet.시설명[i] == "산청(하남)" : toilet.시설명[i] = "산청(남이대전)"
    elif toilet.시설명[i] == "고성(하남)" : toilet.시설명[i] = "고성공룡나라(대전)"
    elif toilet.시설명[i] == "고성(통영)" : toilet.시설명[i] = "고성공룡나라(통영)"
    elif toilet.시설명[i] == "영산(마산)" : toilet.시설명[i] = "영산(창원)"
    elif toilet.시설명[i] == "남성주(양평)" : toilet.시설명[i] = "남성주참외(양평)"
    elif toilet.시설명[i] == "남성주(창원)" : toilet.시설명[i] = "남성주참외(창원)"
    elif toilet.시설명[i] == "문경(마산)" : toilet.시설명[i] = "문경(창원)"
    elif toilet.시설명[i] == "괴산(마산)" : toilet.시설명[i] = "괴산(창원)"
    elif toilet.시설명[i] == "충주(마산)" : toilet.시설명[i] = "충주(창원)"
    elif toilet.시설명[i] == "서여주(마산)" : toilet.시설명[i] = "서여주(창원)"
    elif toilet.시설명[i] == "단양(부산)" : toilet.시설명[i] = "단양(부산방향)휴게소"
    elif toilet.시설명[i] == "단양(춘천)" : toilet.시설명[i] = "단양(춘천방향)휴게소"
    elif toilet.시설명[i] == "동해(동해)" : toilet.시설명[i] = "동해(삼척)"
    elif toilet.시설명[i] == "구정(동해)" : toilet.시설명[i] = "구정(삼척)"
    elif toilet.시설명[i] == "보성녹차(목포)" : toilet.시설명[i] = "보성녹차(영암)"
    elif toilet.시설명[i] == "보성녹차(광양)" : toilet.시설명[i] = "보성녹차(순천)"
    elif toilet.시설명[i] == "장유(부산)" : toilet.시설명[i] = "장유(서부산)"
    elif toilet.시설명[i] == "김해금관가야(통합)" : toilet.시설명[i] = "김해금관가야"
    elif toilet.시설명[i] == "진안(익산)" : toilet.시설명[i] = "진안마이산(익산)"
    elif toilet.시설명[i] == "진안(장수)" : toilet.시설명[i] = "진안마이산(장수)"
    elif toilet.시설명[i] == "속리산(청원)" : toilet.시설명[i] = "속리산(청주)"
    elif toilet.시설명[i] == "화서(상주)" : toilet.시설명[i] = "화서(영덕)"
    elif toilet.시설명[i] == "의성(상주)" : toilet.시설명[i] = "의성(청주)"
    elif toilet.시설명[i] == "청송(상주)" : toilet.시설명[i] = "청송(청주)"
    elif toilet.시설명[i] == "구리(퇴계원)" : toilet.시설명[i] = "구리(일산)"
    elif toilet.시설명[i] == "오수(전주)" : toilet.시설명[i] = "오수(완주)"
    elif toilet.시설명[i] == "황전(전주)" : toilet.시설명[i] = "황전(완주)"
    elif toilet.시설명[i] == "외동(울산)" : toilet.시설명[i] = "외동(부산)"
    elif toilet.시설명[i] == "내린천(통합)" : toilet.시설명[i] = "내린천"

toilet

#칼럼 이름 바꾸기, 노선 칼럼 삭제, 합계
toilet.rename(columns = {'시설명' : '휴게소명'}, inplace = True)
toilet.drop(['노선'], axis=1, inplace=True)
toilet['변기수_합계'] = toilet['남자_변기수'] + toilet['여자_변기수']

toilet

#변기수 합계 평균 내기
toilet_mean = toilet['변기수_합계'].mean()
toilet_mean

"""#주차장(기준8)"""

#주차장 csv 파일 읽기
parking = pd.read_csv('/content/drive/MyDrive/고속도로 휴게소 주차장 현황(2020년).csv', encoding='CP949', index_col=None, engine='python')

parking

#주차장 파일 휴게소명 정리
for i in range(len(parking)):
    if parking.휴게소명[i] == "서울(만남)" : parking.휴게소명[i] = "서울만남(부산)"
    elif parking.휴게소명[i] == "입장(서울)" : parking.휴게소명[i] = "입장거봉포도(서울)"
    elif parking.휴게소명[i] == "천안(서울)" : parking.휴게소명[i] = "천안삼거리(서울)"
    elif parking.휴게소명[i] == "천안(부산)" : parking.휴게소명[i] = "천안호두(부산)"
    elif parking.휴게소명[i] == "정읍(천안)" : parking.휴게소명[i] = "정읍녹두장군(천안)"
    elif parking.휴게소명[i] == "정읍(순천)" : parking.휴게소명[i] = "정읍녹두장군(순천)"
    elif parking.휴게소명[i] == "하남(만남)" : parking.휴게소명[i] = "하남드림"
    elif parking.휴게소명[i] == "이천(통영)" : parking.휴게소명[i] = "이천(남이)"
    elif parking.휴게소명[i] == "음성(통영)" : parking.휴게소명[i] = "음성(남이)"
    elif parking.휴게소명[i] == "오창(통영)" : parking.휴게소명[i] = "오창(남이)"
    elif parking.휴게소명[i] == "인삼랜드(하남)" : parking.휴게소명[i] = "금산인삼랜드(대전)"
    elif parking.휴게소명[i] == "인삼랜드(통영)" : parking.휴게소명[i] = "금산인삼랜드(통영)"
    elif parking.휴게소명[i] == "함양(하남)" : parking.휴게소명[i] = "함양(대전)"
    elif parking.휴게소명[i] == "산청(하남)" : parking.휴게소명[i] = "산청(대전)"
    elif parking.휴게소명[i] == "고성(하남)" : parking.휴게소명[i] = "고성공룡나라(대전)"
    elif parking.휴게소명[i] == "고성(통영)" : parking.휴게소명[i] = "고성공룡나라(통영)"
    elif parking.휴게소명[i] == "영산(마산)" : parking.휴게소명[i] = "영산(창원)"
    elif parking.휴게소명[i] == "남성주(양평)" : parking.휴게소명[i] = "남성주참외(양평)"
    elif parking.휴게소명[i] == "남성주(창원)" : parking.휴게소명[i] = "남성주참외(창원)"
    elif parking.휴게소명[i] == "문경(마산)" : parking.휴게소명[i] = "문경(창원)"
    elif parking.휴게소명[i] == "괴산(마산)" : parking.휴게소명[i] = "괴산(창원)"
    elif parking.휴게소명[i] == "충주(마산)" : parking.휴게소명[i] = "충주(창원)"
    elif parking.휴게소명[i] == "서여주(마산)" : parking.휴게소명[i] = "서여주(창원)"
    elif parking.휴게소명[i] == "단양(부산)" : parking.휴게소명[i] = "단양(부산방향)휴게소"
    elif parking.휴게소명[i] == "단양(춘천)" : parking.휴게소명[i] = "단양(춘천방향)휴게소"
    elif parking.휴게소명[i] == "동해(동해)" : parking.휴게소명[i] = "동해(삼척)"
    elif parking.휴게소명[i] == "구정(동해)" : parking.휴게소명[i] = "구정(삼척)"
    elif parking.휴게소명[i] == "보성녹차(목포)" : parking.휴게소명[i] = "보성녹차(영암)"
    elif parking.휴게소명[i] == "보성녹차(광양)" : parking.휴게소명[i] = "보성녹차(순천)"
    elif parking.휴게소명[i] == "장유(부산)" : parking.휴게소명[i] = "장유(서부산)"
    elif parking.휴게소명[i] == "김해금관가야(통합)" : parking.휴게소명[i] = "김해금관가야"
    elif parking.휴게소명[i] == "진안(익산)" : parking.휴게소명[i] = "진안마이산(익산)"
    elif parking.휴게소명[i] == "진안(장수)" : parking.휴게소명[i] = "진안마이산(장수)"
    elif parking.휴게소명[i] == "속리산(청원)" : parking.휴게소명[i] = "속리산(청주)"
    elif parking.휴게소명[i] == "화서(상주)" : parking.휴게소명[i] = "화서(영덕)"
    elif parking.휴게소명[i] == "의성(상주)" : parking.휴게소명[i] = "의성(청주)"
    elif parking.휴게소명[i] == "청송(상주)" : parking.휴게소명[i] = "청송(청주)"
    elif parking.휴게소명[i] == "구리(퇴계원)" : parking.휴게소명[i] = "구리(일산)"
    elif parking.휴게소명[i] == "오수(전주)" : parking.휴게소명[i] = "오수(완주)"
    elif parking.휴게소명[i] == "황전(전주)" : parking.휴게소명[i] = "황전(완주)"
    elif parking.휴게소명[i] == "외동(울산)" : parking.휴게소명[i] = "외동(부산)"
    elif parking.휴게소명[i] == "내린천(통합)" : parking.휴게소명[i] = "내린천"
    elif parking.휴게소명[i] == "옥천만남(서울)" : parking.휴게소명[i] = "옥천만남"
    elif parking.휴게소명[i] == "덕유산(하남)" : parking.휴게소명[i] = "덕유산(대전)"
    elif parking.휴게소명[i] == "선산(마산)" : parking.휴게소명[i] = "선산(창원)"
    elif parking.휴게소명[i] == "김해(통합)" : parking.휴게소명[i] = "김해금관가야"
    elif parking.휴게소명[i] == "덕평(인천)" : parking.휴게소명[i] = "덕평"
    elif parking.휴게소명[i] == "시흥(통합)" : parking.휴게소명[i] = "시흥하늘"

parking

#칼럼 삭제, 칼럼 이름 변경
parking.drop(['본부', '노선'], axis=1, inplace=True)
parking.rename(columns = {'합계' : '주차장_합계'}, inplace = True)

parking

#주차장 평균 내기
parking_mean = parking['주차장_합계'].mean()

parking_mean

"""#장애인 주차 구역, 임산부 등을 위한 휴게시설 (기준선정 고려)"""

#csv 파일 읽기
facility = pd.read_csv('/content/drive/MyDrive/고속도로 휴게소 장애인 안내시설 설치현황(2020년).csv', encoding='CP949', index_col=None, engine='python')

facility

#휴게소명 정리
for i in range(len(facility)):
    if facility.휴게소명[i] == "구리(퇴계원)" : facility.휴게소명[i] = "구리(일산)"
    elif facility.휴게소명[i] == "마장(복합)" : facility.휴게소명[i] = "마장"
    elif facility.휴게소명[i] == "이천(통영)" : facility.휴게소명[i] = "이천(남이)"
    elif facility.휴게소명[i] == "하남만남(통영)" : facility.휴게소명[i] = "하남드림"
    elif facility.휴게소명[i] == "강릉(서창)" : facility.휴게소명[i] = "강릉(인천)"
    elif facility.휴게소명[i] == "구정(동해)" : facility.휴게소명[i] = "구정(삼척)"
    elif facility.휴게소명[i] == "내리천" : facility.휴게소명[i] = "내린천"
    elif facility.휴게소명[i] == "동해(동해)" : facility.휴게소명[i] = "동해(삼척)"
    elif facility.휴게소명[i] == "문막(서창)" : facility.휴게소명[i] = "문막(인천)"
    elif facility.휴게소명[i] == "서여주(마산)" : facility.휴게소명[i] = "서여주(창원)"
    elif facility.휴게소명[i] == "여주(서창)" : facility.휴게소명[i] = "여주(인천)"
    elif facility.휴게소명[i] == "용인(서창)" : facility.휴게소명[i] = "용인(인천)"
    elif facility.휴게소명[i] == "평창(서창)" : facility.휴게소명[i] = "평창(인천)"
    elif facility.휴게소명[i] == "횡성(서창)" : facility.휴게소명[i] = "횡성(인천)"
    elif facility.휴게소명[i] == "옥천(만남)" : facility.휴게소명[i] = "옥천만남"
    elif facility.휴게소명[i] == "입장(서울)" : facility.휴게소명[i] = "입장거봉포도(서울)"
    elif facility.휴게소명[i] == "천안(서울)" : facility.휴게소명[i] = "천안삼거리(서울)"
    elif facility.휴게소명[i] == "천안(부산)" : facility.휴게소명[i] = "천안호두(부산)"
    elif facility.휴게소명[i] == "괴산(마산)" : facility.휴게소명[i] = "괴산(창원)"
    elif facility.휴게소명[i] == "단양(부산)" : facility.휴게소명[i] = "단양(부산방향)휴게소"
    elif facility.휴게소명[i] == "단양(춘천)" : facility.휴게소명[i] = "단양(춘천방향)휴게소"
    elif facility.휴게소명[i] == "문경(마산)" : facility.휴게소명[i] = "문경(창원)"
    elif facility.휴게소명[i] == "속리산(청원)" : facility.휴게소명[i] = "속리산(청주)"
    elif facility.휴게소명[i] == "음성(통영)" : facility.휴게소명[i] = "음성(남이)"
    elif facility.휴게소명[i] == "오창(통영)" : facility.휴게소명[i] = "오창(남이)"
    elif facility.휴게소명[i] == "충주(마산)" : facility.휴게소명[i] = "충주(창원)"
    elif facility.휴게소명[i] == "화서(상주)" : facility.휴게소명[i] = "화서(영덕)"
    elif facility.휴게소명[i] == "금왕(충주)" : facility.휴게소명[i] = "금왕(제천)"
    elif facility.휴게소명[i] == "안성맞춤(충주)" : facility.휴게소명[i] = "안성맞춤(제천)"
    elif facility.휴게소명[i] == "고창(목포)" : facility.휴게소명[i] = "고창고인돌(목포)"
    elif facility.휴게소명[i] == "고창(서울)" : facility.휴게소명[i] = "고창고인돌(서울)"
    elif facility.휴게소명[i] == "덕유산(하남)" : facility.휴게소명[i] = "덕유산(대전)"
    elif facility.휴게소명[i] == "인삼랜드(하남)" : facility.휴게소명[i] = "금산인삼랜드(대전)"
    elif facility.휴게소명[i] == "정읍(천안)" : facility.휴게소명[i] = "정읍녹두장군(천안)"
    elif facility.휴게소명[i] == "정읍(순천)" : facility.휴게소명[i] = "정읍녹두장군(순천)"
    elif facility.휴게소명[i] == "진안(익산)" : facility.휴게소명[i] = "진안마이산(익산)"
    elif facility.휴게소명[i] == "진안(장수)" : facility.휴게소명[i] = "진안마이산(장수)"
    elif facility.휴게소명[i] == "보성녹차(무안)" : facility.휴게소명[i] = "보성녹차(영암)"
    elif facility.휴게소명[i] == "보성녹차(광양)" : facility.휴게소명[i] = "보성녹차(순천)"
    elif facility.휴게소명[i] == "오수(전주)" : facility.휴게소명[i] = "오수(완주)"
    elif facility.휴게소명[i] == "오수(광양)" : facility.휴게소명[i] = "오수(순천)"
    elif facility.휴게소명[i] == "지리산(담양)" : facility.휴게소명[i] = "지라산(광주)"
    elif facility.휴게소명[i] == "함평천지(무안)" : facility.휴게소명[i] = "함평천지(목포)"
    elif facility.휴게소명[i] == "황전(전주)" : facility.휴게소명[i] = "황전(완주)"
    elif facility.휴게소명[i] == "황전(광양)" : facility.휴게소명[i] = "황전(순천)"
    elif facility.휴게소명[i] == "남성주(양평)" : facility.휴게소명[i] = "남성주참외(양평)"
    elif facility.휴게소명[i] == "남성주(창원)" : facility.휴게소명[i] = "남성주참외(창원)"
    elif facility.휴게소명[i] == "의성(상주)" : facility.휴게소명[i] = "의성(청주)"
    elif facility.휴게소명[i] == "청송(상주)" : facility.휴게소명[i] = "청송(청주)"
    elif facility.휴게소명[i] == "고성(하남)" : facility.휴게소명[i] = "고성공룡나라(대전)"
    elif facility.휴게소명[i] == "고성(통영)" : facility.휴게소명[i] = "고성공룡나라(통영)"
    elif facility.휴게소명[i] == "김해" : facility.휴게소명[i] = "김해금관가야"
    elif facility.휴게소명[i] == "산청(하남)" : facility.휴게소명[i] = "산청(대전)"
    elif facility.휴게소명[i] == "영산(마산)" : facility.휴게소명[i] = "영산(창원)"
    elif facility.휴게소명[i] == "외동(울산)" : facility.휴게소명[i] = "외동(부산)"
    elif facility.휴게소명[i] == "장유(부산)" : facility.휴게소명[i] = "장유(서부산)"
    elif facility.휴게소명[i] == "함양(하남)" : facility.휴게소명[i] = "함양(대전)"
    elif facility.휴게소명[i] == "현풍(현풍)" : facility.휴게소명[i] = "현풍(창원)"

facility

#칼럼 삭제
facility.drop(['본부', '점자블록'], axis=1, inplace=True)
facility

"""#합치기"""

tp = pd.merge(toilet, parking, on='휴게소명', how='outer')
tp

total = pd.merge(tp, facility, on='휴게소명', how='outer')
total

eunseo = pd.read_csv('/content/drive/MyDrive/중간단계_완료.csv', encoding='utf-8', index_col=0, engine='python')
eunseo

hyugeso = pd.merge(eunseo, total, on='휴게소명', how='outer')
hyugeso

#결측치 평균으로 채우기
hyugeso.loc[hyugeso['남자_변기수'] != hyugeso['남자_변기수'], '남자_변기수'] = round(hyugeso['남자_변기수'].mean())
hyugeso.loc[hyugeso['여자_변기수'] != hyugeso['여자_변기수'], '여자_변기수'] = round(hyugeso['여자_변기수'].mean())
hyugeso.loc[hyugeso['변기수_합계'] != hyugeso['변기수_합계'], '변기수_합계'] = round(hyugeso['변기수_합계'].mean())
hyugeso.loc[hyugeso['주차장_합계'] != hyugeso['주차장_합계'], '주차장_합계'] = round(hyugeso['주차장_합계'].mean())
hyugeso.loc[hyugeso['소형'] != hyugeso['소형'], '소형'] = round(hyugeso['소형'].mean())
hyugeso.loc[hyugeso['대형'] != hyugeso['대형'], '대형'] = round(hyugeso['대형'].mean())

hyugeso

hyugeso.drop(hyugeso.index[205:220], inplace=True)

hyugeso

#다 합친 파일 csv로 저장
hyugeso.to_csv("merge.csv", index=False)

from google.colab import files
uploaded = files.upload()

import pandas as pd

mergeData =pd.read_csv('merge (1).csv',index_col=0, header=0, encoding='utf-8',engine='python')

mergeData

"""장애인 주차 구역은 거의 대부분 설치이고, null인 휴게소도 장애인 주차장이 있는 경우가 있어 판정기준으로 적합하지 않다고 판단

임산부 편의시설은 편의시설이라는 기준이 있어 중복이 되는 경우가 있으므로 판정기준으로 적합하지 않다고 판단
"""

toiletM = []
for i in mergeData['남자_변기수']:
  toiletM.append(i)

toiletM

toiletF = []
for i in mergeData['여자_변기수']:
  toiletF.append(i)

toiletF

parking = []
for i in mergeData['주차장_합계']:
  parking.append(i)

parking

"""남자화장실, 여자화장실, 주차장 점수"""

toiletM_sum = 0
for i in range(len(toiletM)):
  #print(type(toiletM[i])) #타입 확인
  toiletM_sum = toiletM_sum + toiletM[i]

toiletM_average = round(toiletM_sum/len(toiletM)) #평균 (반올림)
toiletM_average

toiletF_sum = 0
for i in range(len(toiletF)):
  #print(type(toiletF[i])) #타입 확인
  toiletF_sum = toiletF_sum + toiletF[i]

toiletF_average = round(toiletF_sum/len(toiletF)) #평균 (반올림)
toiletF_average

parking_sum = 0
for i in range(len(parking)):
  #print(type(parking[i])) #타입 확인
  parking_sum = parking_sum + parking[i]

parking_average = round(parking_sum/len(parking)) #평균 (반올림)
parking_average

toiletM_score = [] #남자 화장실 평가 점수

for i in range(len(toiletM)):
  if toiletM[i] > toiletM_average :
    toiletM_score.append(1)
  elif toiletM[i] == toiletM_average :
    toiletM_score.append(0)
  elif toiletM[i] < toiletM_average :
    toiletM_score.append(-1)

toiletM_score

toiletF_score = [] #여자 화장실 평가 점수

for i in range(len(toiletF)):
  if toiletF[i] > toiletF_average :
    toiletF_score.append(1)
  elif toiletF[i] == toiletF_average :
    toiletF_score.append(0)
  elif toiletF[i] < toiletF_average :
    toiletF_score.append(-1)

toiletF_score

parking_score = [] #주차장 평가 점수

for i in range(len(parking)):
  if parking[i] > parking_average :
    parking_score.append(1)
  elif parking[i] == parking_average :
    parking_score.append(0)
  elif parking[i] < parking_average :
    parking_score.append(-1)

parking_score

print(len(allName))
print(len(animal_convenience_score))
print(len(convenience_score_final))
print(len(brand_score_final))
print(len(gas_score))
print(len(drug_score))
print(len(latitude))
print(len(longitude))
print(len(toiletM_score))
print(len(toiletF_score))
print(len(parking))

df=pd.DataFrame({'휴게소명':allName,
                 #'위도':latitude,
                 #'경도':longitude,
                 '반려동물 편의시설 평가점수': animal_convenience_score,
                 '편의시설 평가점수': convenience_score_final,
                 '브랜드 평가점수':brand_score_final,
                 '주유소 평가점수':gas_score,
                 '약국 평가점수':drug_score,
                 '남자 화장실 평가점수':toiletM_score,
                 '여자 화장실 평가점수':toiletF_score,
                 '주차장 평가 점수':parking_score})

df

"""#평가기준 점수 합계"""

df["평가점수 합계"] = df.sum(axis=1)
df

"""#순위"""

df['순위'] = df['평가점수 합계'].rank(method='min',ascending=False)
df

final = []
for i in df['평가점수 합계']:
  final.append(i)

final

rank = []
for i in df['순위']:
  rank.append(i)

rank

"""점수와 순위 확인"""

#확인
import matplotlib.pyplot as plt
plt.plot(final)
plt.show()

plt.plot(rank)
plt.show()

level = [] #평가 점수 합의 등급
print(len(rank))
for i in range(len(rank)):
  if rank[i]/len(rank) * 100 <= 4 :
    level.append(1)
  elif rank[i]/len(rank) * 100 > 4 and rank[i]/len(rank) * 100 <= 9:
    level.append(2)
  else :
    level.append(3)

level

plt.plot(level)
plt.show()

"""순위 등급 잘 나왔는지 확인"""

plt.plot(final)
plt.plot(level)
plt.show()

df=pd.DataFrame({'휴게소명':allName,
                 '위도':latitude,
                 '경도':longitude,
                 '반려동물 편의시설 평가점수': animal_convenience_score,
                 '편의시설 평가점수': convenience_score_final,
                 '브랜드 평가점수':brand_score_final,
                 '주유소 평가점수':gas_score,
                 '약국 평가점수':drug_score,
                 '남자 화장실 평가점수':toiletM_score,
                 '여자 화장실 평가점수':toiletF_score,
                 '주차장 평가 점수':parking_score,
                 '평가점수 합계':final,
                 '순위':rank,
                 '등급':level})

df

df.to_csv('최종.csv')

#휴게소 평가점수 파일 불러오기
import pandas as pd
dataH = pd.read_csv('/content/drive/MyDrive/최종.csv', index_col=0, header=0, engine='python')
dataH

"""#시각화"""

#Folium 사용해서 지도 시각화
import folium
mapH = folium.Map(location = [37.559984, 126.9753071], zoom_str = 16)

c_dic = {1:'red', 2:'orange', 3:'gray'}

for i in dataH.index:
  folium.Marker(
      location = list(dataH.loc[i, ['위도', '경도']]),
      popup = dataH.loc[i, '휴게소명'],
      icon=folium.Icon(color=c_dic[dataH.loc[i, '등급']], icon='star')
  ).add_to(mapH)

mapH

mapH.save('map_휴게소.html')